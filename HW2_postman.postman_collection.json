{
	"info": {
		"_postman_id": "56a940fd-d098-4040-bfd8-e318cbf8971d",
		"name": "HW2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20766860"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.body).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Тест имени\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Valentin\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Тест возраста\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"24\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Тест ЗП\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Тест имени request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Тест возраста request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Тест ЗП request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Тест ЗП через 1.5 года\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(Number(req.salary*4));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valentin",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// . Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"console.log(typeof(jsonData))\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"console.log(req)\r",
							"console.log(typeof(req))\r",
							"console.log(Array.isArray(req))\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Тест имени request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Тест возраста request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req[1].value);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Тест ЗП request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(req[2].value));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name. \r",
							"pm.test(\"Есть ли имя у собаки?\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"А сколько собачке годиков?\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Имя = Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Возраст = 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valentin",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "24",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Valentin&age=24&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Valentin"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Тест имени request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Тест возраста request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(Number(req[1].value));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log('Salary in request =', Number(req[2].value))\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log('Salary in response =', jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log('First salary in response =', jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log('Second salary in response =', jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log('Third salary in response =', jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Тест first salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(Number(req[2].value));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.) \r",
							"pm.test(\"Тест second salary\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(Number(req[2].value*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Тест third salary\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(Number(req[2].value*3));\r",
							"});\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(Array.isArray(jsonData.salary)) // массив\r",
							"let massiv = jsonData.salary\r",
							"for (let i = 0; i < massiv.length; i++) {\r",
							"\tconsole.log(massiv[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Valentin&age=24&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Valentin"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"console.log(typeof(jsonData))\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"ЗП в начале\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"ЗП через 6 месяцев\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"ЗП через 12 месяцев\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 1. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"ЗП через 1.5 года\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"ЗП через 3.5 года\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person to have\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Первая зп совпадает\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП через 6 месяцев совпадает\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(req.salary*2));\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП через 12 месяцев совпадает\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(req.salary*2.7));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП через 1.5 года совпадает\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Number(req.salary*3.3));\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП через 3.5 года совпадает\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(req.salary*3.8));\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"ЗП в person совпадает\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age совпадает\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(req.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП через 5 лет совпадает\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(req.salary)*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(typeof(jsonData.person))\r",
							"console.log(Array.isArray(jsonData.person)) // не массив\r",
							"for (let personKey in jsonData.person) {\r",
							"    console.log(personKey + ': ' + jsonData.person[personKey])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}